package edu.ufl.cise.plpfa21.assignment5;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;

import java.io.PrintStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.time.Duration;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import edu.ufl.cise.plpfa21.assignment1.CompilerComponentFactory;
import edu.ufl.cise.plpfa21.assignment2.IPLPParser;
import edu.ufl.cise.plpfa21.assignment3.ast.IASTNode;
import edu.ufl.cise.plpfa21.assignment5.CodeGenUtils.DynamicClassLoader;

public class CodeGenTestsBaseHW6ForGrading {

	/** Retrieves value of global int variable from loaded classfile.
	 * 
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static int getInt(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return f.getInt(null);
	}

	/**
	 * Retrieves value of glboal boolean variable from loaded classfile
	 * 
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static boolean getBoolean(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return f.getBoolean(null);
	}

	/**
	 * Retrieves value of global String variable from loaded classfile
	 * @param testClass
	 * @param fieldName
	 * @return
	 * @throws Exception
	 */
	static String getString(Class<?> testClass, String fieldName) throws Exception {
		Field f = testClass.getField(fieldName);
		return (String) f.get(null);
	}

	/**
	 * Retrieves value of global List variable from loaded classfile
	 * 
	 * @param testClass
	 * @param listName
	 * @return
	 * @throws Exception
	 */
	static private Iterable<?> getList(Class<?> testClass, String listName) throws Exception {
		Field f = testClass.getField(listName);
		return (Iterable<?>) f.get(null);
	}

	/**
	 * Generates  a classfile for the given source program.  The classfile has the given name and package.
	 * 
	 * @param input
	 * @param className
	 * @param packageName
	 * @return
	 * @throws Exception
	 */
	byte[] compile(String input, String className, String packageName) throws Exception {
		show(input);
		IASTNode ast = CompilerComponentFactory.getParser(input).parse();
		ast.visit(CompilerComponentFactory.getTypeCheckVisitor(), null);
		show(ast);
		byte[] bytecode = (byte[]) ast.visit(CompilerComponentFactory.getCodeGenVisitor(className, packageName, ""), null);
		show(CodeGenUtils.bytecodeToString(bytecode));
		return bytecode;
	}


	/**
	 * Executes indicated method defined in bytecode and returns the result. args is
	 * an Object[] containing the parameters of the method, or may be null if the
	 * method does not have parameters.
	 * 
	 * Requires that the given method is not overloaded in the class file.
	 * 
	 * @param bytecode
	 * @param className
	 * @param methodName
	 * @param args
	 * @return
	 * @throws Exception
	 */
	Object loadClassAndRunMethod(byte[] bytecode, String className, String methodName, Object[] args) throws Exception {
		Class<?> testClass = getClass(bytecode, className);
		return runMethod(testClass,methodName, args);
	}

	private Method findMethod(String name, Method[] methods) {
		for (Method m : methods) {
			String methodName = m.getName();
			if (name.equals(methodName))
				return m;
		}
		throw new RuntimeException("Method " + name + " not found in generated bytecode");
	}

	Class<?> getClass(byte[] bytecode, String className) throws Exception {
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		return testClass;
	}


	Object runMethod(Class<?> testClass, String methodName, Object[] args) throws Exception {
		Method[] methods = testClass.getDeclaredMethods();
		Method m = findMethod(methodName, methods);
		return m.invoke(null, args);
	}



//	@BeforeAll
//	public static void beforeAll() throws FileNotFoundException {
//		out = new PrintStream(new BufferedOutputStream(new FileOutputStream("hw5Errors.txt")));
//	}
//
//	@AfterAll
//	public static void afterAll() {
//		out.close();
//	}

	static PrintStream out = System.out;

	static boolean VERBOSE = false;
	void show(Object o) {
		if (VERBOSE) {
			System.out.println(o);
		}
	}

	static final String className = "TestClass";
	static final String packageName = "edu.ufl.cise.plpfa21.tests";
	

}